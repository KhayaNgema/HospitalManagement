@{
    ViewData["Title"] = "Scan Medication";
    Layout = "~/Views/Shared/_PagesLayout.cshtml";
}

<div class="container-fluid">
    <div class="d-flex align-items-center justify-content-between px-3 py-3 mb-4" style="background-color:#48AAAD;">
        <div class="d-flex align-items-center">
            <a asp-controller="Medications" asp-action="Inventory" class="text-white d-inline-flex align-items-center back-link me-3" style="text-decoration:none;">
                <i class="bi bi-chevron-left me-1"></i> Back
            </a>
            <h2 class="mb-0 text-white"><strong>Unbox Medication</strong></h2>
        </div>
    </div>
<form id="antiforgeryForm">
    @Html.AntiForgeryToken()
</form>

<div class="container d-flex flex-column align-items-center">
    <div class="card shadow p-3 mb-3" style="max-width: 400px; width: 100%;">
        <div id="scanner" class="border border-secondary rounded mb-2" style="height: 100px; width:370px;"></div>
        <p class="text-muted text-center mb-1">🎥 Point your camera at a barcode to scan the medication.</p>
    </div>

    <div id="logContainer" 
         style="width: 400px; height: 250px; background:#000; color:#0f0; font-family: monospace; font-size: 14px; 
                overflow-y: auto; padding: 10px; border-radius: 4px; box-shadow: 0 0 10px #0f0 inset;">
        <div><strong>Logs:</strong></div>
    </div>
</div>

</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
    <script>
        let onDetectedHandler;

function logMessage(msg) {
    const logContainer = document.getElementById('logContainer');
    const time = new Date().toLocaleTimeString();
    const newLog = document.createElement('div');
    newLog.textContent = `[${time}] ${msg}`;

    if (msg.trim().startsWith('❌')) {
        newLog.style.color = '#f44336'; 
        newLog.style.fontWeight = 'bold';
    }
    logContainer.appendChild(newLog);
    logContainer.scrollTop = logContainer.scrollHeight; 
}

function playBeep() {
    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioCtx.createOscillator();
    const gainNode = audioCtx.createGain();

    oscillator.connect(gainNode);
    gainNode.connect(audioCtx.destination);
    oscillator.type = 'sine';
    oscillator.frequency.setValueAtTime(1000, audioCtx.currentTime);
    gainNode.gain.setValueAtTime(0.2, audioCtx.currentTime);

    oscillator.start();
    oscillator.stop(audioCtx.currentTime + 0.15);
}



        function startScanner() {
            Quagga.init({
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: document.querySelector('#scanner'),
                    constraints: {
                        width: 370,
                        height: 100,
                        facingMode: "environment"
                    }
                },
                decoder: {
                    readers: ["code_128_reader", "ean_reader", "ean_8_reader"]
                }
            }, function (err) {
                if (err) {
                    console.error("Quagga init error:", err);
                    logMessage(`❌ Camera init error: ${err}`);
                    return;
                }
                Quagga.start();
            });

            onDetectedHandler = function (data) {
                const code = data.codeResult.code;

                Quagga.offDetected(onDetectedHandler);
                Quagga.stop();

                const token = document.querySelector('#antiforgeryForm input[name="__RequestVerificationToken"]').value;

                fetch('/Medications/ReceiveStockByBarcode', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ barcode: code })
                })
                .then(response => {
                    if (!response.ok) throw new Error("Server error");
                    return response.json();
                })
                .then(result => {
                    if (result.status === 'success') {
                        playBeep();
                        logMessage(`✅ Stock updated for: ${result.medicationName} (Barcode: ${result.barcode})`);
                    } else {
                        logMessage(`❌ ${result.message || "Unable to update stock."}`);
                    }

                    setTimeout(() => {
                        startScanner();
                    }, 1000);
                })
                .catch(error => {
                    logMessage(`❌ Error processing barcode: ${error}`);
                    setTimeout(() => {
                        startScanner();
                    }, 2000);
                });
            };

            Quagga.onDetected(onDetectedHandler);
        }

        document.addEventListener('DOMContentLoaded', startScanner);
    </script>
}
