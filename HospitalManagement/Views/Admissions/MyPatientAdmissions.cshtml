@model IEnumerable<HospitalManagement.Models.Admission>
@inject HospitalManagement.Interfaces.IEncryptionService encryptionService


@{
    ViewData["Title"] = "Admissions";
    Layout = "~/Views/Shared/_PagesLayout.cshtml";
}
<div class="container-fluid">
    <div class="d-flex align-items-center justify-content-between px-3 py-3 mb-4" style="background-color:#48AAAD;">
        <div class="d-flex align-items-center">
            <a asp-controller="Home" asp-action="Index" class="text-white text-decoration-none d-inline-flex align-items-center back-link me-3">
                <i class="bi bi-chevron-left me-1"></i> Back
            </a>
            <h2 class="mb-0 text-white">Admissions</h2>
        </div>
        <div>
            <button class="btn btn-light btn-sm me-2 filter-btn" data-filter="Admitted">
                <i class="bi bi-hospital-fill text-primary"></i> <span class="btn-text ms-1">Admitted</span>
            </button>
            <button class="btn btn-light btn-sm me-2 filter-btn" data-filter="Discharged">
                <i class="bi bi-door-open-fill" style="color:green;"></i> <span class="btn-text ms-1">Discharged</span>
            </button>
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center mb-4 px-3">
        <div class="input-group w-50 me-2">
            <input type="text" class="form-control" placeholder="Search by patient name or department..." id="qrSearchInput">
        </div>
    </div>
    @if (TempData["Message"] != null)
    {
        <div id="tempDataMessage" class="alert @(TempData["Message"].ToString().Contains("successfully") ? "alert-success" : "alert-danger")" role="alert">
            @Html.Raw(TempData["Message"])
            <span class="close" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </span>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            No admissions found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-borderless" id="appointmentsTable">
                <thead class="custom-thead">
                    <tr>
                        <th class="text-nowrap"><i class="fas fa-user me-1"></i> Patient</th>
                        <th class="text-nowrap"><i class="fas fa-calendar-plus me-1"></i> Admission Date</th>
                        <th class="text-nowrap"><i class="fas fa-calendar-minus me-1"></i> Discharge Date</th>
                        <th class="text-nowrap"><i class="fas fa-stethoscope me-1"></i> Department/Ward</th>
                        <th class="text-nowrap"><i class="fas fa-door-open me-1"></i> Room No.</th>
                        <th class="text-nowrap"><i class="fas fa-bed me-1"></i> Bed No.</th>
                        <th class="text-nowrap"><i class="fas fa-bed me-1"></i> Admitted by</th>
                        <th class="text-nowrap"><i class="fas fa-info-circle me-1"></i> Status</th>
                        @if (User.IsInRole("System Administrator"))
                        {
                            <th class="text-nowrap"><i class="fas fa-user-shield me-1"></i> Created By</th>
                            <th class="text-nowrap"><i class="fas fa-calendar-plus me-1"></i> Created At</th>
                            <th class="text-nowrap"><i class="fas fa-user-edit me-1"></i> Updated By</th>
                            <th class="text-nowrap"><i class="fas fa-calendar-check me-1"></i> Last Updated At</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var admission in Model)
                    {
                        var encryptedAdmissionId = encryptionService.Encrypt(admission.AdmissionId);

                        <tr class="clickable-row ellipsis" data-id="@encryptedAdmissionId" style="cursor: pointer;">
                            <td>@(admission.Patient?.FirstName ?? "N/A") @(admission.Patient?.LastName ?? "")</td>
                            <td>@admission.AdmissionDate?.ToString("dd/MM/yyyy")</td>
                            <td>@(admission.DischargeDate?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                            <td>@(admission.Department)</td>
                            <td>@(string.IsNullOrEmpty(admission.RoomNumber) ? "N/A" : admission.RoomNumber)</td>
                            <td>@(string.IsNullOrEmpty(admission.BedNumber) ? "N/A" : admission.BedNumber)</td>
                            <td>@(admission.CreatedBy.FirstName) @(admission.CreatedBy.LastName)</td>
                            <td>@(admission.PatientStatus)</td>
                            @if (User.IsInRole("System Administrator"))
                            {
                                <td>@(admission.CreatedBy?.FirstName ?? "N/A") @(admission.CreatedBy?.LastName ?? "")</td>
                                <td>@admission.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@(admission.ModifiedBy?.FirstName ?? "N/A") @(admission.ModifiedBy?.LastName ?? "")</td>
                                <td>@admission.LastUpdatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                            }
                        </tr>

                    }
                </tbody>
            </table>
            <div class="alert alert-info text-center filter-empty-message d-none">
                No admissions found for your filter.
            </div>
        </div>
    }
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const redirectUrl = '@Url.Action("AdmissionDetails", "Admissions")';
        const rows = document.querySelectorAll('#appointmentsTable tbody tr');
        const emptyMessage = document.querySelector('.filter-empty-message');
        const filterButtons = document.querySelectorAll('.filter-btn');
        const searchInput = document.getElementById('qrSearchInput');

        let currentStatusFilter = 'Admitted';

        document.querySelectorAll('#appointmentsTable .clickable-row').forEach(row => {
            row.addEventListener('click', function () {
                const encryptedAdmissionId = this.getAttribute('data-id');
                if (encryptedAdmissionId && redirectUrl) {
                    window.location.href = redirectUrl + '?admissionId=' + encodeURIComponent(encryptedAdmissionId);
                }
            });
        });

        setTimeout(function () {
            const msg = document.getElementById("tempDataMessage");
            if (msg) msg.style.display = "none";
        }, 7000);

        function applyCombinedFilter() {
            const searchValue = searchInput.value.trim().toLowerCase();
            let matchFound = false;

            rows.forEach(row => {
                const status = row.children[7]?.textContent.trim();
                const patient = row.children[0]?.textContent.trim().toLowerCase();
                const department = row.children[3]?.textContent.trim().toLowerCase();

                const matchesStatus = status === currentStatusFilter;
                const matchesSearch = !searchValue || (patient.includes(searchValue) || department.includes(searchValue));

                if (matchesStatus && matchesSearch) {
                    row.style.display = '';
                    matchFound = true;
                } else {
                    row.style.display = 'none';
                }
            });

            if (!matchFound) {
                emptyMessage.classList.remove('d-none');
            } else {
                emptyMessage.classList.add('d-none');
            }
        }

        filterButtons.forEach(button => {
            button.addEventListener('click', function () {
                currentStatusFilter = this.getAttribute('data-filter');
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                applyCombinedFilter();
            });
        });

        searchInput.addEventListener('input', applyCombinedFilter);

        filterButtons.forEach(btn => {
            if (btn.getAttribute('data-filter') === currentStatusFilter) {
                btn.classList.add('active');
            }
        });
        applyCombinedFilter();
    });
</script>
